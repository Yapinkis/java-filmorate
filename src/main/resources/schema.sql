create table IF NOT EXISTS GENRE (
    GENRE_ID   INTEGER auto_increment,
    GENRE_NAME VARCHAR(20) NOT NULL,
    constraint "GENRE_pk" primary key (GENRE_ID)
);

CREATE TABLE IF NOT EXISTS MPA (
    RATING_ID INTEGER,
    RATING_NAME VARCHAR(20) NOT NULL,
    constraint "RATING_PK"
    primary key (RATING_ID)
);

create table IF NOT EXISTS FILM (
    FILM_ID INTEGER generated by default as identity primary key,
    FILM_NAME CHARACTER VARYING(100) not null,
    DESCRIPTION CHARACTER VARYING(200),
    RELEASE_DATE DATE,
    DURATION INTEGER,
    RATING_ID INTEGER,
    constraint "FILM_RATING_null_fk" foreign key (RATING_ID) references MPA(RATING_ID)
);

create table IF NOT EXISTS FILM_GENRE (
    FILM_ID  INTEGER,
    GENRE_ID INTEGER,
    constraint "FILM_GENRE_FILM_null_fk" foreign key (FILM_ID) references FILM,
    constraint "FILM_GENRE_GENRE_null_fk" foreign key (GENRE_ID) references GENRE
);

CREATE TABLE IF NOT EXISTS MOST_POPULAR_FILMS (
    FILM_ID INT NOT NULL,
    LIKE_COUNT INT NOT NULL,
    constraint "POPULAR_FILMS_FILM" FOREIGN KEY (FILM_ID)
        REFERENCES FILM(FILM_ID),
    constraint "POPULAR_FILMS_LIKE_COUNT" check (LIKE_COUNT > 0)
);

CREATE TABLE IF NOT EXISTS USERS (
    USER_ID INTEGER generated by default as identity primary key,
    USER_EMAIL VARCHAR(255) NOT NULL,
    USER_LOGIN VARCHAR(255) NOT NULL,
    USER_NAME VARCHAR(255) NOT NULL,
    USER_BIRTHDAY DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS FILMS_LIKE (
    FILM_ID INT,
    USER_ID INT,
    constraint "FILM_LIKE_FILM" FOREIGN KEY(FILM_ID)
        REFERENCES FILM(FILM_ID),
    constraint "FILM_LIKE_USER" FOREIGN KEY(USER_ID)
        REFERENCES USERS(USER_ID),
        UNIQUE(FILM_ID, USER_ID)
);

CREATE TABLE IF NOT EXISTS FRIENDSHIP (
    STATUS_USER_ID_1 INT NOT NULL,
    STATUS_USER_ID_2 INT NOT NULL,
    STATUS_REQUEST ENUM('WAITING_FOR_FRIENDSHIP_REQUEST','CONFIRMED','REJECTED') NOT NULL,
    FOREIGN KEY (STATUS_USER_ID_1) REFERENCES USERS(USER_ID),
    FOREIGN KEY (STATUS_USER_ID_2) REFERENCES USERS(USER_ID),
    PRIMARY KEY (STATUS_USER_ID_1, STATUS_USER_ID_2)
);